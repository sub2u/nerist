class Customer < ActiveRecord::Base


  attr_accessor :password, :password_confirmation
  validates :name, :presence=>true
  validates :user_id, :presence=>true
  validates :email, :presence=>true
  validates_format_of :email, :with => /^(|(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6})$/i
  validates :login_id, :presence=>true
  validates_length_of :email, :within => 5..20
  validates_length_of :login_id, :within => 3..20
  validates :password, :presence=>true, :length => { :minimum => 5, :maximum => 40 }
  validates_confirmation_of :password



  attr_protected :password_salt
  def password=(pass)
    @password=pass
    self.password_salt = User.random_string(10) if !self.password_salt?
    self.password_hash = User.hash_password(@password, self.password_salt)
  end
  private
  protected
  def self.hash_password(pass, password_salt)
    Digest::SHA2.hexdigest(pass+password_salt)
  end
  def self.random_string(len)
    chars= ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a
    newpass = ""
    1.upto(len){ |i| newpass << chars[rand(chars.size-1)]}
    return newpass
  end
  def self.authenticate(login, pass)
    u=find(:first, :conditions=>["login_id = ?",login])
    return nil if u.nil?
    return u if User.hash_password(pass, u.password_salt)==u.password_hash
    nil
  end
end
